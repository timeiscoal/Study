1. Struct (구조체)

여러 필드를 묶어서 하나의 구조체를 만든다.
배열이 같은 타입의 값들을 변수 하나로 묶어줬던 것과 달리 구조체는 다른 타입의 값들을 변수 하나로 묶어주는 기능.

```go

// type 타입명 struct{
// 필드 타입 명 

// }

type Student struct {
	Name  string
	Class int
	Num   int
	Score float64
}


```

1. type : type 키워드를 적어서 새로운 사용자 정의 타입을 정의 할 것임을 알린다.
2. 타입명 : 타입명의 첫 번째 글자가 대문자이면 패키지 외부로 공개되는 타입!
3. struct : 타입 종류인 struct
4. 필드 타입 명 : 중괄호 안에 이 구조체에 속한 필드들을 작성, 각 필드명과 타입을 작성한다.

예시 코드처럼, 이름 , 반 , 번호, 성적 등으로 학생 데이터를 만들 때 각각을 변수로 선언하는 것보다 "학생이라는 구조체"로 묶으면 더 쉽게 다룰 수 있습니다.

```go

func main() {

	var a Student // Student 구조체 변수 a를 선언.
    // a := Student{}

	a.Name = "최강록"
	a.Class = 1
	a.Num = 12
	a.Score = 98.5

	fmt.Printf("이름 : %s\n",a.Name)
	fmt.Println(a.Class)
	fmt.Println(a.Num)
	fmt.Printf("%.2f", a.Score)

}


```

var a Student 

변수 a , 타입 Student 를 선언.
a는 Studnet의 필드들인 Name, Class , No ,Score 같은 필드들을 포함한다.
a에 속한 각 필드에는 a.Name처럼 a 뒤에 점.을 찍어서 접근 가능(구조체 변수의 필드에 접근 할 때는 .(점)을 사용한다)


구조체 변수 초기화

1. 구조체 변수를 선언하고 각 필드를 초기화하는 방법.
2. 1. 초깃값 생략, 2. 모든 필드 초기화 , 3. 일부 필드 초기화 방법


1. 초기 값 생략 
초깃값 생략하면 모든 필드가 기본값으로 초기화.

```go

var a Student

fmt.println(a)

// { 0 0 0}

```
string 타입의 기본값은 빈문자열("") , int는 0 , float64는 0

2. 모든 필드 초기화
모든 필드값을 중괄호 사이에 넣어서 초기화한다.
모든 필드가 순서대로 초기화 된다.

```go
    var a Student = Student{"이름", 1, 20 ,86.5}
```

```go
    var a Student = Student{"이름",
		1,
		20,
		86.5,
	}
```

주의 : 필드 순서와 입력한 순서에 맞춰 일대일 매칭이되어 초기화.
      여러 줄을 걸쳐서 초기화한다면 마지막 ,(쉼표) 주의.


3.일부 필드 초기화

일부 필드값만 초기화 할 때는 "필드명 : 필드 값" 형식으로 초기화.
초기화되지 않은 나머지 변수에는 기본값이 할당 된다.
순서는 크게 상관 없다.


```go
var a Student = Student{Name:"최강록",Class:3}

//result => {최강록 3 0 0}

```


구조체를 포함하는 구조체
구조체의 필드로 다른 구조체를 포함 할 수 있다.
1. 일반적인 내장 타입처럼 포함하는 방법
2. 포함된 필드(Embedded Field) 방식


1. 내장 타입처럼 포함하는 방식

```go
type User struct {       //일반사용자
	Name string
	ID   string
	Age  int
}

type VIPUser struct {   //VIP
	UserInfo User       
	VIPLevel int
	Price    int
}

func main() {
	var user User = User{"송강", "SongRiver", 26} //유저 초기화
	var vip VIPUser = VIPUser{User{"황철순", "Mr.H", 45}, 2, 100} //VIP 유저 초기화

	fmt.Println(vip.UserInfo.Name)
	fmt.Println(user.Name)
}
//result => 황철순 송강
```

2. 포함된 필드 방식

구조체에서 다른 구조체를 필드로 포함할 때 필드명을 생략하면 점(.)을 한 번만 찍어서 접근이 가능하다.

```go

// type VIPUser struct {
// 	UserInfo User   
// 	VIPLevel int
// 	Price    int
// }

type VIPUser struct {
	User         // 필드명 생략.
	VIPLevel int
	Price    int
}

func main() {
	var vip VIPUser = VIPUser{User{"황철순", "Mr.H", 45}, 2, 100}

    //fmt.Println(vip.UserInfo.Name)
	fmt.Println(vip.Name)
}

```

이처럼 구조체 안에 포함된 다른 구조체의 필드명을 생략하는 경우를 "포함된 필드"라고 한다.
포함된 필드를 이용한다면, 여러번의 점(.)을 찍을 필요 없이 한 번만으로 바로 접근이 가능하다.


필드 중복 해결
만약 포함된 필드 안에 속한 필드명과 포함한 상위 구조체의 필드명이 서로 겹치는 경우는 어떻게 될까.

이름이 겹칠 경우 현재 변수타입에 해당하는 구조체의 필드에 접근
User 구조체에 포함된 이름이 같은 Num 필드에 접근하려면 아래와 같이 User 구조체 이름을 쓰고 .(점)으로 접근

```go
vip.User.Num
```



```go
type User struct {
	Name string
	ID   string
	Age  int
	Num  int            //User Num 중복 필드
}

type VIPUser struct {
	User
	VIPLevel int
	Price    int
	Num      int        //VIPUser Num 중복 필드
}

func main() {
	var vip VIPUser = VIPUser{User{"황철순", "Mr.H", 45, 999}, 2, 100, 3000}

	fmt.Println(vip.Num)
	fmt.Println(vip.User.Num)

}

// result => 3000, 999


```

구조체 크기

구조체 변수가 선언되면 컴퓨터는 구조체 필드를 모두 담을 수 있는 메모리 공간을 할당한다.

구조체가 차지하는 메모리 크기.

```go
type User struct {
    Age int
    Score float64
}

// var user User

```

1. User 구조체의 user 변수가 선언
2. Age, Score 필드를 연속되게 담을 수 있는 메모리 공간을 찾아 할당.
3. int = 8Byte , float64 = 8Byte , 총 16Byte 크기가 필요하다.

구조체 변수 user의 크기는 16Byte


구조체 값 복사
구조체 변숫값을 다른 구조체에 대입하면 모든 필드값이 복사.

```go

type Student struct {
	Age   int
	Num   int
	Score float64
}

func PrintStudent(s Student) {
	fmt.Printf("나이 : %d , 넘버 : %d , 점수 : %.2f", s.Age, s.Num, s.Score)
}

func main() {
	var student = Student{20, 9, 87.5}
	 
    // student 구조체 모든 필드가 studnetCopy로 복사된다.
    studentCopy := student
	
    fmt.Println(student)
	fmt.Println(studentCopy)
}

// result  {20 9 87.5}
//         {20 9 87.5}   

```

Go 내부에서는 필드 각각이 아닌 구조체 전체를 한번에 복사를 한다.
대입 연산자가 우변 값을 좌변 메모리 공간에 복사할 때 "복사되는 크기"는 타입 크기와 같다.
구조체 크기는 모든 필드를 포함하므로 구조체 전체 필드가 복사되는 것.



필드 배치 순서에 따른 구조체 변화

```go

package main

import (
	"fmt"
	"unsafe"
)

type User struct {
	Age   int32   //4바이트
	Score float64 //8바이트
}

func main() {
	var user User = User{25, 95.5}
	fmt.Println(unsafe.Sizeof(user)) 
    // 해당 변수의 메모리 공간 크기를 반환한다.

	// result => 16
}

```

앞서 살펴본 방법이라면 구조체의 크기는 12Byte이여야 하지만 , 16Byte로 값이 출력된다.
이러한 이유는 메모리 정렬 때문이다.

메모리 정렬
컴퓨터가 데이터에 효과적으로 접근하고자 메모리를 일정 크기 간격으로 정렬하는 것을 말한다.

레지스터 : 실제 연산에 사용되는 데이터가 저장되는 곳
1. 레지스터 크기가 4바이트인 컴퓨터는 32비트 컴퓨터
2. 레지스터 크기가 8바이트인 컴퓨터는 64비트 컴퓨터

레지스터 크기가 8바이트라는 것은 한 번 연산에 8바이트 크기를 연산 할 수 있단 이야기.
따라서 데이터가 레지스터 크기와 똑같은 크기로 정렬되어 있으면 훨씬 효과적으로 데이터를 읽어올 수 있다.

예시 : 
64비트 컴퓨터에서 int64 데이터의 시작 주소가 100번지일 경우.
100은 8의 배수가 아니기 때문에 , 레지스터 크기 8에 맞게 정렬되어 있지 않는다.
이럴 경우 데이터를 메모리에서 읽어올 때 성능적으로 손해가 발생해서, 처음부터 프로그램 언어에서 데이터를 만들 때 8의 배수인 메모리 주소에 데이터를 할당한다.
이 경우 100번지가 아닌 104번지에 할당된다.



```go
type User struct {
	Age   int32  //4
	Score float64 // 8
}

func main() {

	var user User
	fmt.Println(unsafe.Sizeof(user))  //16
}
```

예시 : 시작 주소가 240번지라면 , Age의 시작 주소는 240번지가 되며, Age는 4바이트 공간을 차지하기 때문에 바로 붙여서 Score를 할당하면 244번지가 된다.
244는 8의 배수가 아니라 성능적으로 손해를 본다.
그래서 프로그램 언어에서 User 구조체를 할당 할 때 Age와 Score 사이를 4바이트만큼 띄워서 할당한다.

메모리 패딩(Memory Padding)
메모리 정렬을 위해서 필드 사이에 공간을 띄우는 것.
(참고 : 4바이트 변수의 시작 주소는 4의 배수로 맞추고, 2바이트 변수의 시작 주소는 2의 배수로 맞춰 패딩한다.)
이러한 메모리 패딩을 고려하여 낭비를 줄이기 위해서는 8바이트보다 작은 필드는 크기를 고려해서 배치해야 합니다.


```go
package main

import (
	"fmt"
	"unsafe"
)

type User struct {
	A int8 // 1byte
	B int64 // 8byte
	C int8 // 1byte
	D int64 // 8byte
}

func main() {
	var user User;
	fmt.Println(unsafe.Sizeof(user)) // 32
}
```

```go
type User struct {
	A int8 // 1byte
	C int8 // 1byte
	B int64 // 8byte
	D int64 // 8byte
}

func main() {
	var user User;
	fmt.Println(unsafe.Sizeof(user)) // 24
}
```



프로그래밍에서 구조체의 역할

프로그래밍 역사는 객체 간 결합도(객체간 의존관계)는 낮추고 연관있는 데이터 간 응집도를 올리는 방향으로 흘러감.
앞서서 살펴본 , 함수, 배열, 구조체 모두 응집도를 증가시키는 역할을 한다.
1. 함수는 관련 코드 블럭을 묶어서 응집도를 높이고 재 사용성을 증가시킨다.
2. 배열은 같은 타입의 데이터들을 묶어서 응집도를 높인다.
3. 구조체는 관련된 데이터들을 묶어서 응집도를 높이고 재사용성을 증가시킨다.

구조체를 사용해서 관련 데이터들을 묶으면 프로그래머는 설계 과정에서 개별 데이터에 신경쓰지 않고 더 큰 범위에서 프로그램을 설계할 수 있다.

구조체가 등장함으로써 프로그래머는 코딩을 시작할 때 개별 데이터에 집중하지 않고, 큰 범위에서 생각 가능.

결합도,응집도

결합도와 응집도의 용어를 이해하는 것이 중요하다.
결합도(Coupling)는 모듈간 상호 의존관계를 형성해서 서로 강하게 결합되어 있는 정도를 나타내는 용어로 의존성을 말하기도 합니다.

응집도(Cohesion)는 모듈의 완성도를 말하는 것으로 모듈 내부의 모든 기능이 단일 목적에 충실하게 모여 있는지를 나타내는 용어.


구조체를 이용하면, 개별 데이터의 조작/연산보다도 구조체 간의 관계와 상호작용 중심으로 프로그래밍 가능
구조체는 메서드,인터페이스가 추가되면서 객체지향 프로그래밍으로 발전하였다.


