# 2023-05-18

인터페이스

1. 인터페이스란 구현을 포함하지 않는 메서드 집합.
2. 구체화된 타입이 아닌 인터페이스만 가지고 메서드를 호출 할 수 있어 
추후 프로그램 요구사항 변경 시 유연하게 대처 할 수 있다.
3. Go언어에서는 인터페이스 구현 여부를, 그 타입이 인터페이스에 해당하는
메서드를 가지고 있는지로 판단하는 덕 타이핑을 지원한다.

효과 

1. 인터페이스를 이용해서 객체 간 상호작용을 정의
2. 덕 타이핑을 사용하면 서비스 사용자 중심의 코딩이 가능
3. 인터페이스를 타입 변환해 구체화된 타입으로 변환

인터페이스를 이용하면 메서드 구현을 포함한 구체화된 객체가 아닌, 추상화된
객체로 상호작용할 수 있다.

인터페이스 선언

1. type , 인터페이스 이름 , 키워드(interface)

```go
type DuckInterface interface {
	//메서드 집합
	//testMethod()
}
```

인터페이스도 구조체처럼 **타입 중 하나이기 때문에, type을 써줘야 한다.**
인터페이스 변수 선언이 가능하고, **변수의 값으로 사용** 할 수 있다는 것

메서드 집합을 작성하는 {}중괄호 안에 세 가지 유의사항.

1. 메서드는 반드시 메서드명이 있어야 한다.
2. 매개변수와 반환이 다르더라도 이름이 같은 메서드는 있을 수 없다.
3. 인터페이스에서 메서드 구현을 포함하지 않는다.

```go
type Stringer interface {
	String() string
}

type Student struct{
	Name string
	Age int
}

func (s Student) String() string{
	return fmt.Sprintf("이름 %s , %d살" , s.Name,s.Age)
}

func main(){
	// var student Student = Student{"최강록", 10}
	student := Student{"최강록",10}
	var stringer Stringer //Stringer 타입

	stringer = student

	fmt.Printf("%s\n", stringer.String())
}
// result = 이름 최강록 , 10살
```

- fmt 패키지의 Sprintf() 함수는 서식에 따라 문자열을 만들어서 반환하는 함수.
Printf() 함수가 서식에 따라 문자열을 터미널에 출력한다면 , Sprintf()는 화면에 출력하는 것이 아닌 string 타입으로 반환한다는 점이 다르다.

- stringer 값으로, student를 대입한다.
stringer는 Stringer 인터페이스이고, student 타입은 String() 메서드를 포함하고 있기 때문에, stringer 값으로 student를 대입할 수 있다.

인터페이스는 객체지향 프로그래밍에서 아주 중요한 역할을 한다.
인터페이스를 이용하면 구체화된 객체가 아닌 인터페이스만 가지고, 메서드를 호출 할 수 있기 때문에, 큰 코드 수정 없이 필요에 따라 구체화된 객체를 바꿔서 사용 할 수 있다.

삼각형과 사각형의 객체를 생성하는 코드

이 객체는 둘다 Figure(도형)의 넓이를 나타내고 있다.
하지만 각각의 넓이를 구하는 방식은 조금의 차이점이 있다.
사각형이 아닌 원이나 타원 등의 추가가 된다면, 
조금 더 큰 도형이라는 상위 개념으로 묶어 보는 것은 어떨까?라는 생각으로
만들어진 것이 “상속”이다.

Golang 에서 interface는 다른 언어의 상속과는 다르다고 한다.
우선적으로는 개념과 활용 방법에 대해서 학습하고, 이 후에 그 차이점에 대해서 자세히 살펴보자….

```go
package main

import "fmt"

type Figure interface {
   Area() float32
}

type Square struct {
   Width  float32
   Height float32
}

type Triangle struct {
   Width  float32
   Height float32
}

func (s Square) Area() float32 {
   return s.Width * s.Height
}

func (t Triangle) Area() float32 {
   return t.Width * t.Height / 2
}

func main() {
	 var s, t Figure
   s = Square{2, 5}
   t = Triangle{2, 5}
   fmt.Println(s.Area())
   fmt.Println(t.Area())
}
```

추상화 계층
내부 동작을 감춰서 서비스를 제공하는 쪽과 사용하는 쪽 모두에게 자유를 주는 방식을 추상화라고 한다.

인터페이스는 추상화를 제공하는 추상화 계층(abstraction layer) 이다.

은행 이용자는 입금과 인출이 은행 내부에서 어떻게 일어나는지 알 수 없고, 알 필요도 없다.
구체화된 타입으로 상호작용하는 게 아니라, 관계로 상호작용을 한다.

구체화된 타입 :concrete type , 모든 메서드가 구현된 타입, 즉 내부 구현이 모두 있는 타입

덕 타이핑

Go 언어에서는 어떤 타입이 인터페이스를 포함하고 있는지 여부를 결정할 때, 덕 타이핑 방식을 사용한다.
이 방식은 타입 선언 시 인터페이스 구현 여부를 명시적으로 나타낼 필요 없이, **인터페이스에 정의한 메서드 포함 여부만 결정**하는 방식이다.

쉽게 말하자면 , 각 값이나 인스턴스의 실제 타입은 상관하지 않고, 
구현된 메서드로만 타입을 판단하는 방식을 덕 타이핑이라고 한다.

이는 오리테스트에 유래한 말이다.

```go
type Duck interface{
	Quack()	string
	Walk()	string
}

type Chicken struct{
}
func (c Chicken) Quack() string{
	return "꼬꼬~"
}
func (c Chicken) Walk() string{
	return "닭이 걷는 모습"
}

type Pigeon struct{
}
func (p Pigeon) Quack() string{
	return "구구구구~"
}
func (p Pigeon) Walk() string{
	return "비둘기가 걷는 모습"
}

func main() {
	ducks := []Duck{
		Chicken{},
		Pigeon{},
		Human{}, // 컴파일에러
	}
	for _, duck := range ducks{
		fmt.Println(duck.Quack(), duck.Walk())
	}
}
//result 꼬꼬~ 닭이 걷는 모습
//       구구구구~ 비둘기가 걷는 모습
```

덕 타이핑에서는 인터페이스 구현 여부를 타입 선언에서 하는 것이 아니라,
인터페이스가 사용 될 때 **해당 타입이 인터페이스에 정의된 메서드를 포함**했는지,
여부로 결정합니다.

인터페이스 기본 기능 외 다른 기능 3가지

1. 포함된 인터페이스
2. 빈 인터페이스
3. 인터페이스 기본 값

1. 인터페이스를 포함한 인터페이스

구조체에서 다른 구조체를 포함된 필드로 가질 수 있듯이 인터페이스도 다른 인터페이스를 포함 할 수 있다.
이를 포함된 인터페이스라고 한다.

```go
package main

import "fmt"

type Person struct {
   Name string
   Age int
}

func (this Person) hisName() {
   fmt.Printf("his name is %s.\n", this.Name)
}

func (this Person) hisAge() {
   fmt.Printf("his age is %d.\n", this.Age)
}

type GetName interface {
   hisName()
}

type GetAge interface {
   hisAge()
}

type InfoPerson interface {
   GetName
   GetAge
}

func main()  {
   var i InfoPerson
   i = Person{"Kukaro",27}
   i.hisName()
   i.hisAge()
}
```

- **interface가 내부에 interface를 선언하면 그 선언된 interface의 메소드를 가져오게된다.**

1. 빈 인터페이스 interface{}를 인수로 받기

interface{}는 메서드를 가지고 있지 않은 빈 인터페이스이다.
가지고 있어야 할 메서드가 하나도 없기 때문에 모든 타입이 빈 인터페이스로 쓰일 수 있다.

- 빈 인터페이스는 어떤 값이든 받을 수 있는 함수, 메서드, 변숫값을 만들 때 사용.

```go
func PrintValue(v interface{}) {

	switch t := v.(type) {

	case int:
		fmt.Println(t)
		fmt.Println(int(t))
	case float64:
		fmt.Println(t)
		fmt.Println(float64(t))
	case string:
		fmt.Println(t)
		fmt.Println(string(t))
	default:
		fmt.Printf("%T\n", t)
	}

}

type Student struct {
	Age int
}

func main() {
	println()
	PrintValue(10) // 10
	PrintValue(3.14) //3.14
	PrintValue("Hi") //Hi
	PrintValue(Student{15}) // main.Student

}
```

1. 인터페이스 기본 값 nil

인터페이스 변수의 기본값은 유효하지 않는 메모리 주소를 나타내는 nil

프로그램 실행 중 발생하는 에러를 런 타임 에러라고 한다,
그래서 인터페이스를 사용 할 때 항상 인터페이스 값이 nil인지 아닌지 확인이 필요.
이는 인터페이스 뿐만 아니라 다른 타입 변수들 역시 마찬가지로, 값이 nil인지 아닌지 확인해야 한다.

nil 로 인한 에러라면 에러 메세지에서 (invalid memory address) 구문을 찾을 수 있을 것이다. 
비 정상적인 메모리 주소에 접근하다가 에러가 발생했다는 의미.

컴파일 에러 , 런타임 에러

1. 컴파일 에러는 코드를 기계어로 전환하여 실행 파일로 만드는 중에 발생한 에러로, 주로 문법 오류에서 발생한다.
2. 런타임 에러는 실행 도중 예기치 않은 문제로 발생하는 에러로 문법에는 문제가 없으나 앞의 예제와 같이 값이 비정상적일 경우에 발생한다.

인터페이스 변환하기

인터페이스 변수를 타입 변환을 통해서 구체화된 다른 타입이나 다른 인터페이스로 변환할 수 있다.

1. 구체화된 다른 타입으로 타입 변환하기
2. 다른 인터페이스로 타입 변환하기

1. 구체화된 다른 타입으로 타입 변환하기.

인터페이스 변수를 다른 구체화된 타입으로 타입 변환할 수 있다.
인터페이스를 본래의 구체화된 타입으로 복원할 때 주로 사용한다.

사용 방법은 인터페이스 변수 뒤에 점(.)을 찍고 소괄호() 안에 변경하려는 타입을 써주면 된다.

```go
var a Interface
t := a.(ConcreteType)
```

인터페이스 변수에 .(타입)을 붙여 변환.

```go
type Stringer interface { 
	String() string
}

type Student struct {
	Age int
}

func (s *Student) String() string {
	return fmt.Sprintf("%d", s.Age)
}

func PrintAge(stringer Stringer) {

	s := stringer.(*Student)
	fmt.Printf("%T\n", stringer)//&main.Student
	fmt.Printf("%d\n", s.Age)
}

func main() {
	s := &Student{15}

	PrintAge(s)
}
```

구조체 포인터 *Student 타입은 String() 메서드를 가지고 있다.
그래서 PrintAge() 함수의 stringer 인터페이스 인수로 사용 할 수 있다.

- 인터페이스 Stringer
    - String() 메서드 있다!
- 구조체 Student
    - Age 변수 있다.(필드)
    - String() 메서드 있다!

- 구조체  Student
    - stringer 타입은 String()메서드를 포함하고 있어서,
    Stringer 인터페이스로 사용 가능
    - 인터페이스 stringer를 *Student로 타입 변환
    - Student 타입의 Age 변수 출력

Stringer 인터페이스는 String() 메서드만 포함하고 있기 때문에,
Stringer 인터페이스 변수는 Age 값에 접근 할 수가 없다.
그래서 Age 값에 접근하기 위해서 stringer는 *Student 타입으로 타입 변환.
stringer 인스턴스 변수 내부에 *Student 타입 인스턴스를 가리키고 있어서 , 
*Student 타입으로 에러 없이 변환된다.

인터페이스 변수를 구체화된 타입을 타입 변환하려면 해당 타입이 인터페이스 메서드 집합을 포함하고 있어야 한다.
그렇지 않으면 컴파일 타임 에러 발생.

```go
type Stringer interface {
	String() string
}

type Student struct {
}

func main() {
	var stringer Stringer
	stringer.(*Student)
	// *Student does not implement Stringer (missing method String)
}
```

*Studnet 타입은 String() 메서드를 포함하지 않기 때문에, 
Stringer 인터페이스에서 *Student로 타입 변환이 불가능.

또 변환하려는 타입이 인터페이스를 이미 포함하고 있다고 하더라도, 
실제 인터페이스 변수가 가리키는 인스턴스가 변환하려는 타입이 아닌 경우에는 컴파일 타임 에러가 아니라, 런 타임 에러 발생.

```go
type Stringer interface {
	String() string
}

type Student struct {
}

func (s *Student) String() string {
	return "Student"
}

type Actor struct {
}

func (a *Actor) String() string {
	return "Actor"
}

func ConvertType(stringer Stringer) {
// stringer 변수는 내부에 *Actor 인스턴스를 가리키고 있다.
// 그래서 *Student로 타입변환을 하려 하지만, stringer는 
// *Actor 인스턴스를 가리키고 있기 때문에 런타임 에러 발생
	student := stringer.(*Student)
	fmt.Println(student)
}

func main() {
	actor := &Actor{}
	fmt.Printf("%T\n", actor)
	ConvertType(actor)
}
```

다른 인터페이스로 타입 변환하기.

인터페이스 변환을 통해 구체화된 타입 뿐 아닌, 다른 인터페이스로 타입 변환할 수 있다.
이때는 구체화된 타입으로 변환할 때와는 달리, 변경되는 인터페이스가 변경 전 인터페이스를 포함하지 않아도 된다.

하지만 인터페이스가 가리키고 있는 실제 인스턴스가 변환하고자 하는 다른 인터페이스를 포함해야 한다.

ConcreteType이 Alnterface와 BInterface 인터페이스를 모두 포함하고 있는 경우에 다음과 같이 ConcreteType 인스턴스를 가리키고 있는 AInterface 변수 a는 BInterface로 타입 변환이 가능하다.

그 이유는 a가 가리키고 있는 ConcreteType 인스턴스는 BInterface도 포함하고 있기 때문이다.

var a AInterface = ConcreteType{}

b := a.(BInterface)

다른 인터페이스로 타입 변환이 실패하는 경우.

```go
type Reader interface {
	Read()
}
type Closer interface {
	Close()
}

type File struct {
}

func (f *File) Read() {

}

func ReadFile(reader Reader) {
//panic: interface conversion: *main.File is not main.Closer: missing method Close
	c := reader.(Closer)
	c.Close()
}

func main() {
	file := &File{}
	ReadFile(file)
}
```

타입 변환이 아예 불가능한 타입이라면 컴파일 타임 에러가 발생하고,
문법적을 문제 없지만, 실행 도중 타입 변환에 실패하는 경우에는 , 런타임 에러

타입 변환 가능 여부를 실행 중에 검사 할 수 있다면 런 타임 에러가 발생하지 않도록 할 수 있다.

타입 변환 성공 여부 반환

타입 변환 반환값을 두 개의 변수로 받으면 타입 변환 가능 여부를 두 번째 반환값(불리안)으로 알려준다.

이때 타입 변환이 불가능하더라도, 두 번째 반환 값이 false로 반환될 뿐 런타임 에러는 발생하지 않는다.!

```go
var a Interface
t, ok :=a.(ConcreteType)
//t 타입 변환 결과 , ok 변환 성공 여부
```

앞에서 살펴본 인터페이스 변환과 같지만, 타입 변환 결과값을 하나가 아니라 두 변수로 받는 점만 다르다.

런 타임 에러를 미연에 방지 할 수 있기 때문에 인터페이스 변환 시 항상 변환 여부를 확인하길 추천한다.

```go
type Reader interface {
	Read()
}
type Closer interface {
	Close()
}

type File struct {
}

func (f *File) Read() {

}

func ReadFile(reader Reader) {
	c, ok := reader.(Closer)
	fmt.Println(c, ok) // <nil> false
}

func main() {
	file := &File{}
	ReadFile(file)
}
```

함수 고급 편

1. 가변 인수 함수
2. defer 지연 실행
3. 함수 타입 변수
4. 함수 리터럴

1. 가변인수 함수

가변 인수 기능을 사용하면 인수 개수를 고정하지 않고 받을 수 있다.
fmt 패키기의 Println 함수는 인수 개수가 정해져 있지 않다.

```go
fmt.Println()
fmt.Println(1)
fmt.Println(1,2,3,4,5,6,7)
```

이와 같이 함수 인수 개수가 고정적이지 않은 함수를 가변 인수 함수라고 한다.

- 키워드 사용

( … ) 키워드를 사용해서 가변 인수를 처리할 수 있다.
인수 타입 앞에 …을 붙여서 해당 타입 인수를 여러 개 받는 가변 인수임을 표시하면 된다.

```go
func sum(nums ...int) int { // 가변 인수를 받을 함수 
	sum := 0
	// nums 타입은 []int로 슬라이스 타입으로 처리 된다.
  // 즉 가변 인수는 함수 내부에서 해당 타입의 슬라이스로 처리된다.
  //아마 얼마만큼의 값이 들어올지 몰라서 배열이 아닌 슬라이스로 처리하는듯
	fmt.Printf("%T\n", nums)
	for _, v := range nums {
		sum += v
	}
	return sum
}

func main() {
	fmt.Println(sum(1, 2, 3, 4, 5))
	fmt.Println(sum(10, 20))
	fmt.Println(sum())
}
// []int
// 15
// []int
// 30
// []int
// 0
```

nums == []int{1,2,3,4,5}

1. 인수 타입 앞에 점 … 찍어서 가변 인수임을 표시
2. 함수 내부에서는 슬라이스 타입으로 동작함.

println(2,”hello”,3.14) 처럼 여러 타입 인수를 섞어 쓸 수 있는 방법은?

빈 인터페이스.
모든 타입이 빈 인터페이스를 포함하고 있기 때문에, 빈 인터페이스 가변 인수 …interface{} 타입으로 받으면 모든 타입의 가변 인수를 받을 수 있다.
그리고 함수 내부에서 인터페이스 변환 기능을 이용해서 타입별로 다르게 동작.

```go
func Print(args ...interface{}) string {
	for _, arg := range args {
		switch f := arg.(type) {
		case bool:
			val := arg.(bool)
		case float64:
			val := arg.(float64)
		case int:
			val := arg.(int)
		}
	}
}
```

1. …interface{} 모든 타입의 가변 인수를 받는다.
2. for문에서 range를 사용해 모든 인수를 순회하면서 처리
3. switch문을 사용해 타입별로 다른 구문을 실행, 각 case처리
4. 인터페이스 변환을 사용해 각 타입별로 변환해 처리.

- defer

때로는 함수가 종료되기 직전에 실행해야 하는 코드가 있을 수 있다.
대표적으로 파일, 소켓 핸들같이 OS 내부 자원을 사용하는 경우.

파일 생성하거나 읽을 때 OS에 파일 핸들을 요청한다.
그러면 윈도우, 리눅스, 맥 같은 OS는 파일 핸들을 만들어서 프로그램에 알려준다.
하지만 이 같은 자원은 OS 내부 자원이기 때문에 반드시 쓰고 나서 OS에 돌려줘야 한다.
프로그램에서 OS 내부 자원을 돌려주지 않으면 내부 자원이 고갈되어 더는 파일을 만들지 못하거나 네트워크 통신을 하지 못할 수 있다.

1. 파일 작업 시작할 때 파일 핸들 요청 (프로그램 → OS)
2. 파일 핸들 제공(프로그램 ← OS)
3. 작업 완료 후 파일 핸들 반환 (프로그램 → OS)

파일 작업 이 후 반드시 파일 핸들을 반환해야 하기 때문에, 이렇게 잊지 않고 함수 종료 전에 처리해야 하는 코드가 있을 때 defer를 사용해 실행 할 수 있다.

```go
defer 명령문
```

명령문이 바로 실행되는 게 아닌, 해당 함수가 종료되기 직전에 실행 되도록 지연.

```go
func main() {
	f, err := os.Create("test.txt") // 파일 생성
	if err != nil { // 에러 확인
		fmt.Printf("failed to create file")
		return
	}

	defer fmt.Println("반드시 호출") 
	defer f.Close() 
	defer fmt.Println("파일이 닫혔다.")

	fmt.Println("이게 처음일껄?")
	fmt.Fprintln(f, "hello")
}  
// 이게 처음일껄?
// 파일이 닫혔다.
// 반드시 호출
```

defer로 함수 종료 전에 반드시 호출 되어야 할 코드를 지정하는 것이 중요.
defer은 역순으로 호출 된다.

Fprint() 함수는 , 첫 번째 인수인 파일 핸들에, 텍스트를 쓰는 함수이다.
정확히는 첫 번째 인수는 파일 핸들이 아닌, io.Writer 인터페이스를 받기 때문에 io.Writer 인터페이스 메서드를 포함한 모든 객체는 Fprint() 함수를 사용할 수 있다.

- 함수 타입 변수

함수 타입 변수란 함수를 값으로 갖는 변수.

함수 역시 숫자로 표현 될 수 있어 변수의 값이 될 수 있다.
함수 타입은 함수명과 함수 코드 블록을 제외한 함수 정의(function signature)로 표시한다.

```go
func add(a,b int) int{
	return a+b
}
```

위 add() 함수를 가리키는 함수 포인터는 함수명인 add와 코드 블럭인 {} 사이를 제외.

```go
func operator (int,int) int
operator = getOperator(3,4)
```

```go
func add(a int, b int) int {

	return a + b
}

func mul(a, b int) int {
	return a * b
}

func getOperator(op string) func(int, int) int {
	if op == "+" {
		return add
	} else if op == "*" {
		return mul
	} else {
		return nil
	}
}

func main() {
	var operator func(int, int) int
	operator = getOperator("*")

	var result = operator(3, 4)
	fmt.Println(result)
}
```

func (int, int) int 타입,
즉 int 인수를 2개를 받고 , int를 반환하는 함수 타입 변수 operator를 선언.
초기화를 안했기 때문에, 함수 기본값인 nil을 값으로 가진다.
operator 값을 getOperator(”*”) 호출 결과값으로 복사한다.
mul 함수를 반환하기 때문에 operator 값은 mul() 함수를 가리키게 된다.

그리고 함수 타입 변수 operator에 소괄호를 묶어서 opreator가 가리키는 함수를 호출 할 수 있다.
operator가 mul() 함수를 가리키므로 operator(3,4) == mul(3,4)

별칭으로 함수 정의 줄여 쓰기.

- 함수 정의는 일반적으로 길다.
- 그래서 매번 함수 정의를 쓰면 코드 가독성이 떨어진다.
- 이럴 때는 별칭 타입을 써서 함수 정의를 짧게 줄일 수 있다.

```go
type opFunc func(int,int) int
```

```go
func getOperator(op string) opFunc
```

함수 정의에서 매개변수 명 생략

함수 정의에서 매개변수명은 적어도 되고 적지 않아도 된다.

```go
func (int,int) int
```

또는

```go
func (a int , b int) int
```

함수 리터럴

함수 리터럴은 이름 없는 함수로 함수명을 적지 않고 함수 타입 변숫값을 대입하는 함숫값을 의미한다.

함수명이 없기 때문에 함수명으로 직접 함수를 호출 할 수도 없고, 함수 타입 변수로만 호출이 된다.

다른 프로그래밍 언어에서는 익명 함수 도는 람다라고 불린다.

```go
type opFunc func(a, b int) int

func getOperator(op string) opFunc {
	if op == "+" {
		return func(a, b int) int {
	// 함수 리터럴을 사용해서 더하기 함수를 정의하고 반납
			return a + b
		}
	} else if op == "*" {
		return func(a, b int) int {
			return a * b
		}
	} else {
		return nil
	}
}

func main() {
	fn := getOperator("*")
	result := fn(3, 4) // 함수 타입 변수를 사용해서 함수 호출
//result := getOperator("*")(3, 4)
	fmt.Println(result)
}
```

함수 이름을 적지 않고 함수를 정의한 함수 리터럴을 사용해서, 두 int 타입 값을 더하는 함수를 정의하고 반환한다.

```go
fn := func(a,b int) int{
    return a+b
}
result := fn(3,4)
```

함수 리터럴은 위와 같이 호출하거나 아래와 같이 직접 호출 할 수도 있다.

```go
result := func(a,b int) int{
		return a+b
}(3,4)
```

- 함수 리터럴 내부 상태

함수 리터럴은 필요한 변수를 내부 상태로 가질 수 있다.
함수 리터럴 내부에서 사용되는 외부 변수는 자동으로 함수 내부 상태로 저장이 된다.

```go
func main() {
	i := 0
	f := func() {
		i += 10
	}
	i++
	f()

	fmt.Println(i)
}
```

i 변수는 함수 내부에 있지 않는 외부 변수이다.
함수 리터럴 내부에서 외부 변수인 i에 접근을한다.
이렇게 함수 리터럴 내부에서 외부 변수에 접근 할 때, 필요한 변수를 내부 상태로 가져와 접근할 수 있게 한다.

f 함수 타입 변수를 통해서 함수 리터럴을 실행.

i값이 함수 리터럴이 정의되는 시점이 아닌 함수가 호출되는 시점 값으로 사용되는 것을 주의.
함수 리터럴이 정의되는 시점에 i는 0이지만, 함수가 호출 되는 시점은 i++가 실행된 다음이기 때문에 함수 리터럴 내부의 i는 0이 아닌 ,1 이 된다.

함수 리터럴에서 외부 변수를 내부 상태로 가져올 때 값 복사가 아닌, 인스턴스 참조로 가져오게 된다.
포인터의 형태로 가져온다고 보면 될 것이다.

함수 리터럴 내부 상태 주의점

- 함수 리터럴 외부 변수를 내부 상태로 가져오는 것을 캡쳐라고 한다.
- 캡쳐는 값 복사가 아닌, 참조 형태로 가져오게 되니 주의해야함