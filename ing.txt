고루틴

    고루틴(goroutine)이란, 프로그램에 있는 다른 고루틴과 관련하여 독립적으로 동시에 실행되는 함수입니다.
    즉, Go 언어로 동시에 실행되는 모든 활동을 고루틴이라고 합니다.

    고 루틴을 만드는 비용은 스레드에 비해 매우 적기 때문에 경량 스레드라고 합니다.
    모든 프로그램은 적어도 하나의 main함수라는 고루틴을 포함하고 고루틴은 항상 백그라운드에서 작동합니다.
    메인 함수가 종료되면 모든 고루틴은 종료됩니다. 따라서 고루틴보다 main이 먼저 종료되는 것을 방지해야 합니다.

쓰레드
    쓰레드(Thread)는 프로그램내에서 실행 흐름을 의미합니다. 
    프로그램은 일반적으로는 하나의 실행 흐름(쓰레드)을 가지지만, 경우에 따라 하나 이상의 쓰레드를 갖는 경우도 있습니다. 
    이를 멀티 쓰레드라고 합니다.

    CPU는 단순한 계산기입니다. 
    따라서 주어진 값을 계산만 할 뿐, 이 값이 어디서 왔고, 어디로 가는지는 신경쓰지 않습니다. 
    멀티 쓰레드인 경우, OS에서 쓰레드를 관리하고, 쓰레드의 개수가 CPU보다 많은 경우, 쓰레드를 교체해가면서 CPU를 사용하도록 합니다. 
    이를 컨텍스트 스위칭(Context Switching)이라고 합니다.

    컨텍스트 스위칭은 하나의 CPU가 여러 쓰레드를 다룰 때, 쓰레드를 전환시키며 CPU를 사용하도록 하는 것을 의미합니다. 
    이렇게 컨텍스트 스위칭이 발생하면 전환 비용이 발생하므로 성능이 저하되는 문제가 발생할 수 있습니다.
    반대로, CPU의 개수가 쓰레드의 개수와 동일하다면, 컨텍스트 스위칭이 발생하지 않으므로 성능에 아무 문제가 발생하지 않습니다.


함수에서 지역 변수는 함수 실행이 끝나면 소멸이 된다.
여기서 calc 함수는 y=ax+b를 구하고 클로저를 리턴하도록 구성되어 있다.
그리고 맨 처음 f := calc() 변수 f에 클로저를 저장하고 나면 calc 함수의 지역변수인 a,b는 소멸 된다.
아래에서는 정상적으로 a,b를 구할 수 있다.

이처럼 클로저를 사용하면 지역변수가 소멸되지 않고 나중에 호출 될 때 마가, 계속 가져다 쓸 수 있다.
즉 클로저는 함수가 선언 될때의 환경을 유지한다.
다르게 이야기하면 프로그램의 흐름을 변수에 저장할 수 있다.
클로저는 함수형 언어의 큰 특징이며, Go 언어는 클로저를 통해 함수형 언어의 기능을 구현하고 있다.

https://pyrasis.com/book/GoForTheReallyImpatient/Unit25