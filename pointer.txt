1. pointer (포인터)

포인터는 메모리 주소를 값으로 갖는 타입
포인터를 이용하면 동일한 메모리 공간을 여러 변수가 가리킬 수 있습니다.

장점: 포인터를 이용하면 메모리 복사를 줄일 수 있다.
     포인터를 이용하면 반환값 없이 변숫값을 바꿀 수 있다.


int 타입 변수 a가 있을 때 a는 메모리에 저장되어 있고 속성으로 메모리 주소를 가지고 있다.
변수 a의 주소가 0x0100번지라고 했을 때, 메모리 주솟값 또한 숫자값이기 때문에 다른 변수의 값으로 사용될 수 있다.

이렇게 메모리 주솟값을 변수값으로 가질 수 있는 변수를 포인터 변수라고 한다.

다른 변수처럼 포인터 변수도 값을 담는 메모리 공간이 있다.
다만 그 값으로 주소만 담을 수 있다.

p = &a
포인트 변수 p -> 변수 a
int 타입 변수 a의 메모리 주소는 0x0100번지이고, 값으로 3을 갖는다.

변수 p에 a의 주소를 대입하는 구문.
포인터 변수 p의 값은 변수 a의 주소인 0x0100이 되고, 포인터 변수 p가 변수 a를 가르킨다.
이렇게 메모리 주소를 값으로 가져 메모리 공간을 가리키는 타입을 포인터라고 한다.

포인터를 이용하면 여러 포인터 변수가 하나의 메모리 공간을 가르킬 수도 있고, 포인터가 가리키고 있는 메모리 공간의 값을 읽을 수도 변경할 수도 있습니다.

여러 포인터가 같은 메모리 공간을 가리킬 수 있다.


포인트 변수 선언

포인터 변수는 가리키는 데이터 타입 앞에 *(별)을 붙여서 선언한다.

var p *int

p는 int타입 데이터의 메모리 주소를 가리키는 포인터 변수이다.
float64 타입을 가리키면 *float64,User 구조체를 가리키면 *User라고 선언

포인터는 메모리 주소를 값으로 갖는다.
그러면 어떻게 메모리 주소를 알아봅시다.
데이터 앞에 &붙이면 된다.

var a int
var p *int
p = &a

qustn a의 메모리 주소를 포인터 변수 p의 값으로 대입한다.
포인터 변수 p가 변수 a의 메모리 주소를 값으로 가진다.
이제 p를 이용해서 변수 a의 값을 변경할 수 있다.
포인터 변수 앞에 *을 붙이면 그 포인터 변수가 가리키는 메모리 공간에 접근할 수 있다.

*p = 20

p가 가리키는 메모리 공간의 값을 20으로 변경한다.
p가 변수 a의 메모리 공간을 가리키기 때문에 a값이 20으로 변경된다.

```go
func main() {
	var a int = 500
	var p *int // int 포인터 변수 p 선언

	fmt.Println(p) // <nil>

	p = &a // a의 메모리 주소를 변수 p의 값으로 대입(복사)

	fmt.Println(p)  // 메모리 주솟값
	fmt.Println(*p) //p가 가리키는 메모리의 값 출력

	*p = 300 // p가 가리키는 메모리 공간의 값을 변경한다.

	fmt.Println(a) // a값의 변화 확인
}
```

1. int 타입 포인터 변수 p를 선언.
2. 변수 a의 주소를 p에 대입
3. p값을 출력한다.
4. p가 가르키는 메모리 주소에 담긴 값을 출력한다
   포인터 변수 앞에 *(별)을 붙여서 접근
   p는 a변수 메모리 주소를 값으로 가지고 있기 때문에 *p는 a의 값이 된다. (500)
5. 포인터 변수 p가 가리키는 메모리 공간의 값을 300으로 변경한다.
   p는 a의 메모리 주소를 가리키기 때문에 *p=300은 곧 a값을 300으로 변경하는 것과 같다.

```go
func main() {

	var a int = 10
	var b int = 20

	var p1 *int = &a //p1과 p2는 같은 메모리 공간을 가리킨다.
	var p2 *int = &a
	var p3 *int = &b

	fmt.Println(p1 == p2) // true
	fmt.Println(p1 == p3) // false
}
//result => true , false

```


포인터의 기본값 nil

포인터 변수 값을 초기화하지 않으면 기본 값은 nil입니다.
이 값은 0이지만 정확한 의미는 유효하지 않는 메모리 주솟값 즉 어떤 메모리 공간도 가리키고 있지 않음을 나타낸다.

아래 예는 포인터 변수 p가 유효한 메모리 주소를 가리키는지 검사하는 구문.
var p *int
if p != nil{
    p가 nil이 아니라는 얘기는 p가 유효한 메모리 주소를 가리킨다는 의미
}

포인터를 왜 쓰나
변수 대입이나 함수 인수 전달은 항상 값을 복사하기 때문에, 많은 메모리 공간을 사용하는 문제와, 큰 메모리 공간을 복사 할 때 발생하는 성능 문제를 안고 있다.
또한 다른 공간으로 복사되기 때문에, 변경 사항이 적용되지 않는다.

포인터를 사용하지 않는 예:

```go
type Data struct { // Data 타입 구조체
	value int
	data  [200]int
}

func ChangeData(arg Data) { //매개변수 Data를 받는다.
	// data 변숫값이 모두 복사되기 때문에
	// ChangeData() 함수의 매개변수 arg와 data는 서로 다른 메모리 공간을 갖는 변수이다.

	arg.value = 99      // data 변경
	arg.data[100] = 999 // 하지만 서로다른 메모리 공간을 가지고 있기 때문에
	                    // arg값을 변경해도 data값은 변경되지 않는다.

}

func main() {
	var data Data

	ChangeData(data)        //인자로 data
	fmt.Println(data.value) //각각 필드 출력
	fmt.Println(data.data[100])
	//result = 0 0
}

```
ChangeData 함수의 매개변수 arg와 data는 서로 다른 메모리 공간을 가지고 있는 변수이다.
그래서 arg 값을 변경해도 data값은 변경되지 않는다.

그리고 이 예제코드에서 ChangeData()함수 호출 시 data 변수값이 모두 복사가 된다.
이는 구조체의 크기만큼 복사가 된다는 의미이며, 200*8 + 8 = 1608바이트 크기만큼 복사가 된다.
만약에 더 큰 값 또는 짧은 시간에 많은 호출이 발생한다면 성능에 문제가 생길 수도 있다.
이러한 문제점들의 해결방법은 pointer

```go

type Data struct {
	value int
	data  [200]int
}

func ChangeData(arg *Data) { // 매개변수로 data 포인터를 받는다.
	arg.value = 999 // arg 데이터 변경
	arg.data[100] = 999
}

func main() {

	var data Data

	ChangeData(&data) // 인자로 데이터의 주소 값 넘겨준다
	fmt.Println(data.value)
	fmt.Println(data.data[100])
}


```

1. ChangeData() 함수 매개변수로 Data 구조체의 포인터를 받는 것으로 변경
2. data의 변수값이 아닌 data의 메모리 주소를 인자로 전달한다.
3. 메모리 주소는 8바이트 숫자값이기 때문에 1608바이트의 구조체 전부 복사되는 것이 아닌 8바이트만 복사
4. arg 포인터 변수가 가리키는 구조체의 값을 변경한다.
5. arg 포인터의 값은 main() 함수의 data 구조체 주솟값이기 때문에 arg 포인터가 main() 함수의 data 변수를 가리키게 된다. 그래서 데이터 값 변경

포인터를 이용하면 data 변수의 메모리 주소만 복사되기 때문에 메모리 주솟값인 8바이트만 복사된다.
또한 arg 포인터 변수가 data 변수의 메모리 주소를 값으로 가지고 있어서 data 구조체의 내부 필드 값을 변경할 수 있다.
이 처럼 포인터를 이용하면 더 효율적으로 데이터를 조작할 수 있다.


Data 구조체를 생성해 포인터 변수 초기화하기.

구조체 변수를 별도로 생성하지 않고, 
곧바로 포인터 변수에 구조체를 생성해 주소를 초깃값으로 대입하는 방법

--- 기존방식

Data 타입 구조체 변수 data를 선언한다.

var data Data
var p *Data = &data  (data 변수의 주소를 반환한다.)


--- 구조체를 생성해 초기화하는 방식

Data 타입 구조체 변수 p를 선언한다.

var p *Data =&data{} (Data 구조체를 만들어 주소를 반환한다.)

Data 타입 포인터 변수p에 Data 구조체를 생성해 그 주소를 대입한다.
이렇게 하면 (메모리에 실제로 있는 구조체 데이터의 실체를 가리키게 되므로) 포인터 변수 p만 가지고도
구조체의 필드값에 접근하고 변경할 수 있다.

인스턴스

인스턴스란 메모리에 할당된 데이터의 실체.

var data Data
Data 타입값을 저장할 수 있는 메모리 공간을 할당한다.
이렇게 할당된 메모리 공간의 실체를 인스턴스라고 한다.

var data Data
var p *Data = &data

1. Data 타입 포인터 변수 p를 선언하고 , data의 주소를 대입.
2. 이때 포인터 변수 p는 data를 가리킨다고 말한다. 이때 p가 생성될 때 새로운 Data 인스턴스가 	만들어진게 아니다. 기존에 있던 data 인스턴스를 가리킨 것이다.
즉 만들어진 총 Data 인스턴스 개수는 한 개입니다.

인스턴스를 별도로 생성하지 않고, 곧바로 인스턴스를 생성해 그 주소를 포인터 변수에 초깃값으로 대입하는 코드를 살펴보죠.

var p *Data = &Data{}

Data 인스턴스를 만들고, 그 메모리 주소를 포인터 변수 p가 가리킨다.
이번에도 인스턴스는 하나만 생성된다.

포인터 변수가 아무리 많아도 인스턴스가 추가로 생성되는 것은 아니다.

var p1 *Data = &Data{}
var p2 *Data = p1
var p3 *Data = p2

Data 인스턴스 하나를 만들고 , 포인터 변수 p1, p2,p3가 가리킨다.
가리키는 포인터 변수는 인스턴스 개수와 무관하다.

var data1 Data
var data2 Data = data1
var data3 Data = data1

data 1, data 2 , data 3 모두 인스턴스이다.
data 1값이 data2, data3에 복사가 되어서 값만 같을 뿐이다.


인스턴스는 데이터의 실체
1. 인스턴스는 메모리에 존재하는 데이터의 실체
2. 포인터를 이용해서 인스턴스에 접근 할 수 있다.
3. 구조체 포인터를 함수 매개변수로 받는다는 말은 구조체 인스턴스로 입력 받겠다는 얘기와 같다.

new() 내장함수
new 내장 함수를 이용하면 앞서 살펴본 포인터값을 별도의 변수를 선언하지 않고 초기화하는 방법보다 훨씬 간편하게 표현이 가능하다.

p1 := &Data{} // &를 사용하는 초기화
var p2 = new(Data) // new()를 사용하는 초기화

1. new() 내장 함수는 인수로 타입을 받는다.
2. 타입 메모리에 할당하고 기본값으로 채워 그 주소를 반환한다.
3. new를 이용해서 내부 필드 값을 원하는 값으로 초기화 할 수는 없다. 
4. 그에 p1 := &Data{3,4}처럼 사용자 초기화가 가능하다.

&Data{}, new(Data)모두 자주 사용하니 기억하자.

인스턴스는 언제 사라지나.
메모리는 무한하지 않다.
만약 메모리에 데이터가 할당만 되고 사라지지 않는다면, 프로그램은 금세 메모리가 고갈되어,
프로그램이 비정상 종료될 것이다.

그래서 쓸모없는 데이터 메모리에서 해제하는 기능이 필요하다.
Go 언어는 가비지 컬렉터라는 메모리 청소부 기능을 제공한다.
이 가비지 컬렉터가 일정 간격으로 메모리에서 쓸모없어진 데이터를 청소한다.

그럼 그러한 데이터를 어떻게 알수 있나.
아무도 찾지 않는 데이터 = 쓸모없는 데이터


```go
func testCode(){
	u := &User{} // u 포인터 변수를 선언하고, 인스턴스를 생성한다.
	u.Age = 30
	fmt.Println(u) // 내부 변수 u는 사라진다. 더불어 인스턴스도 사라짐
}

```
1. u 포인터 변수를 선언하고 인스턴스를 생성한다.
2. 메모리에 User 데이터가 할당됐고, u 포인터 변수가 가리킨다.
3. 이때 인스턴스는 u 포인터 변수로 사용되는 인스턴스이기 때문에 지워지면 안된다.
4. 하지만 tescode()가 종료되면 함수 내부 변수 u는 사라져 User 인스턴스를 가리키는 포인터 변수가 없게 된다. 이제 User 인스턴스는 쓸모가 없게 됐습니다.
드디어 가비지 컬렉터가 나서서 쓸모없어진 User인스턴스를 지운다.

가비지 컬렉터가 알아서 메모리 청소를 해주니 편리하다.
메모리는 굉장히 크기 때문에 이 메모리 영역을 모두 검사해서 쓸모없는 데이터를 지우는데 많은 성능을 소모한다.

네가지만 기억하자
1. 인스턴스는 메모리에 생성된 데이터의 실체
2. 포인터를 이용해서 인스턴스를 가리키게 할 수 있다.
3. 함수 호출 시 포인터 인수를 통해서 인스턴스를 입력받고 그 값을 변경할 수 있게 된다.
4. 쓸모 없어진 인스턴스는 가비지 컬렉터가 자동으로 지워준다.

스택메모리와 힙메모리
책보고 다시메모하자


문자열

문자열이란 문자의 집합이다.
Go 언어는 UTF-8 문자코드를 사용한다.
UTF-8 문자코드는 유니코드의 일종으로 가변 길이 문자 인코딩 방식이다.
string 타입은 문자열을 나타내는 배열과 길이로 문자열을 가리킨다.

장점
하나 이상의 문자를 담을 수 있어서 텍스트 데이터를 간편하게 표현할 수 있다.
기본 문자코드가 UTF-8이기 때문에 한글이나 한자 사용에 문제가 없다.

1. 문자 집합. 타입 명 string
2. 문자열은 큰따옴표, 백쿼트(back quote)로 묶어서 표시.
3. 큰따옴표와 백쿼트의 쓰임새는 서로 다르다.
4. 백쿼트로 문자열을 묶으면 문자열 안의 특수 문자가 일반 문자처럼 처리된다.

```go

func main() {

	str1 := "Hello\t'world\n"
	str2 := `Hello\t'world\n`
	fmt.Println(str1) //Hello   'world
	fmt.Println(str2) //Hello\t'world\n
}
```

백쿼트로 묶어서 사용하면 특수 문자가 동작하지 않는다.

```go
func main() {
	sentence1 := "첫번째 줄\n두번째 줄\n세번째 줄\n"

	// 백쿼트에서는 여러 줄 표현에 특수문자가 필요하지 않다.
	sentence2 := `첫번째 줄
두번째 줄
세번째 줄`
	fmt.Println(sentence1)
	fmt.Println(sentence2)
}

// 첫번째 줄
// 두번째 줄
// 세번째 줄

// 첫번째 줄
// 두번째 줄
// 세번째 줄
```

UTF-8 문자코드
1. Go는 UTF-8 문자코드를 표준 문자코드로 사용
2. UTF-16이 한 문자에 1바이트로 고정 사용하는 것과 달리 UTF-8은 자주 사용되는 영문자, 숫자 , 일부 특수 문자를 1바이트로 표현하고 그외 다른 문자들은 2~3바이트로 표현한다.
영문자,숫자등을 1바이트로 표현해 UTF-16에 비해 크기를 절약할 수 있고, ANSI코드와 1:1대응이 되어서 ANSI로 바로 변환이 가능하다는 장점이 있다.
Go는 UTF-8 을 표준 문자코드로 사용하기 대문에 한글이나 한자 사용에 특별히 변환없이 사용이 가능하다.

rune 타입으로 한 문자 담기

1. 문자 하나를 표현하는 데 rune 타입을 사용한다.
2. UTF-8은 한글자가 1~3바이트 크기이기 때문에, UTF-8 문자값을 가지려면 3바이트가 필요하다.
하지만 Go언어 기본 타입에서 3바이트 정수 타입은 제공되지 않기 때문에 rune 타입은 4바이트 정수 타입인 int32 타입의 별칭 타입이다.

type rune int32 

rune 타입과 int32는 이름만 다를 뿐 같은 타입.

```go

func main() {

	// 문자 한 개는 작은 따옴표로 묶는다.
	var char rune = '한'

	fmt.Printf("%T\n", char) //type 출력
	fmt.Println(char)        // char 값 출력
	fmt.Printf("%c\n", char) // 문자출력

	//result : int32 , 54620 , 한
}


```

len()으로 문자열 크기 알아내기
len()내장 함수를 이용해서 문자열 크기를 알 수 있다.
이때 크기는 문자 수가 아니라 말 그대로 문자열이 차지하는 메모리 크기이다.


rune == int32 타입이 서로 같기 때문에 type 출력에서도 int 32

```go
func main() {

	str1 := "가나다라마"
	str2 := "abcde"

	fmt.Println(len(str1)) //15
	fmt.Println(len(str2)) // 5
}
```
둘다 글자 수가 5개이지만, 한글 문자열 크기는 15이다.
UTF-8에서 한글은 글자당 3바이트를 차지하기 때문에, 3*5=15의 크기를 가지고 있음을 알 수 있다.
글자의 크기말고 글자 수는 어떻게 알 수 있을까

[]rune 타입 변환으로 글자 수 알아내기
string 타입, rune 슬라이스 타입인 []rune 타입은 상호 타입 변환이 가능하다.
우선 슬라이스는 길이가 변할 수 있는 배열로만 알고 있고 이후 자세히 살펴보자.

```go
func main() {

	str := "Hello World"

	// "H","e","l","l","o".... 문자코드 배열
	runes := []rune{72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100}

	fmt.Println(str) // Hello World
	fmt.Println(runes) // [72 101 108 108 111 32 87 111 114 108 100]
	fmt.Println(string(runes))  // Hello World

}

```

string 타입과 []rune 타입은 모두 문자들의 집합을 나타내기 때문에, 상호 타입 변환이 가능하다.
이렇게 타입 반환을 할 경우 rune 배열의 각 요소에는 문자열의 각 글자가 대입된다.
이를 통해서 문자열의 글자 수를 알 수 있다.

```go
func main() {

	str := "Hello 월드"                        

	runes := []rune(str)  // []rune 타입으로 타입 변환 

	fmt.Println(len(str)) // 12
	fmt.Println(str)      // Hello 월드
	fmt.Println(runes)    // [72 101 108 108 111 32 50900 46300] 
	fmt.Println(len(runes)) // 8
}
```
1. 문자열 선언
2. []rune 타읍으로 변환
3. 각 글자들이 배열의 요소로 바뀐다.
4. len(str)은 바이트 크기를 나타낸다 , len(runes)는 요소들의 개수를 나타낸다.

string 타입은 연속된 바이트 메모리라면, []rune 타입은 글자들의 배열로 이루어져 있다.
그래서 이 둘은 완전히 다른 타입이만, 편의를 위해서 Go 언어는 둘의 상호 타입 변환을 지원하고 있다.


string 타입을 []Byte로 타입 변환할 수 있다.
string 타입과 []Byte 타입은 상호 타입 변환이 가능하다.
[]Byte는 1 1바이트 부호 없는 정수 타입의 가변 길이 배열이다.

문자열이나는 것도 결국 메모리에 있는 데이터이고, 메모리는 1바이트 단위로 저장되기 때문에, 모든 문자열은 1바이트 배열로 변환이 가능하다.
파일을 쓰거나 네트워크 데이터를 전송하는 경우, io.Writer 인터페이스를 사용하고, io.Writer 인터페이스는 []byte 타입을 인수로 받기 때문에 []byte 타입으로 변환해야 한다.
그래서 문자열을 쉽게 전송하고자 string에서 []byte 타입으로 변환을 지원한다.
우선 string과 []byte 타입 간 상호 변환이 가능하다는 것만 알고 넘어가자.


문자열 순회

문자열에 들어있는 글자들을 순회하는 방법 3가지

1.인덱스를 사용한 바이트 단위 순회
2.[]rune으로 타입 변환 후 한 글자씩 순회
3.range 키워드를 이용한 한 글자씩 순회


1. 인덱스를 사용한 바이트 단위 순회

인덱스를 사용해 직접 접근하는 방법.


```go
func main() {

	str := "Hello 월드!" // 한영 섞인 문자열
	
	// 문자열 크기 순회
	for i := 0; i < len(str); i++ {
	// 바이트 단위로 출력한다.
		fmt.Printf("%T  %d  %c\n", str[i], str[i], str[i])
	}
}

```

영문과 공백 문자는 제대로 출력했지만 , 한글은 깨졌다.
(%c = 정수에 해당하는 문자 출력)
이유는 str[i]처럼 인덱스로 접근하면 요소의 타입은 uint8 즉 byte이다
그래서 1바이트 크기인 영문자는 잘 표현이 되지만 3바이트 크기인 한글은 깨져 표시가 된다.

한 글자씩 순회할 수 있는 방법 2가지

1. []rune으로 타입 변환 후 한 글자씩 순회하기.
2. range 키워드를 이용해 한 글자씩 순회하기.


[]rune으로 타입 변환 후 한글자씩 순회하기

```go

func main() {

	str := "hello 월드!"
	arr := []rune(str) // 문자열을 []rune으로 타입 변환

	for i := 0; i < len(arr); i++ {
		fmt.Printf("%T , %d , %c\n", arr[i], arr[i], arr[i])
	}

}

```
1. 영,한 섞인 문자열 선언.
2. 문자열을 []rune 으로 타입 변환 후 , arr에 값 대입
3. 요소의 개수 만큼 순회하는 반복문 실행

[]rune으로 변환한 다음에 순회하면 한 글자씩 순회할 수 있지만, []rune으로 변환되는 과정에서 별도의 배열을 할당하므로 불필요한 메모리를 사용하게 된다.

이러한 단점을 range 키워드를 활용하면 방지할 수 있다.


range 키워드를 이용해 한 글자씩 순회하기.

```go
func main() {

	str := "Hello 월드 !"
	for _, v := range str { // range 순회
		fmt.Printf("%T %d %c\n", v, v, v)
	}
}
```

1. 한,영 섞인 문자열 선언
2. range를 활용해 반복문 실행. 인덱스 값은 별로도 사용하지 않아 _(언더바)로 무력화
3. 모든 문자 타입이 int32, 즉 rune 

range를 이용하면 추가 메모리 할당 없이 문자열을 한 글자씩 순회할 수 있어서 불필요한 메모리 낭비를 하지 않을 수 있다.


문자열 합치기

문자열은 +,+= 연산을 활용해 문자열을 이을 수 있다.

```go

func main() {

	str1 := "hello"
	str2 := "world"

	str3 := str1 + " " + str2
	fmt.Println(str3)

	str1 += " " + str2
	fmt.Println(str1)
}

```


문자열 비교하기

연산자 ==, !=를 사용해서 문자열이 같은지 같지 않은지 비교.
두 문자열이 완전히 같다면 true, 아니면 false 
단 한 글자, 길이 차이 모두 false

```go

func main() {

	str1 := "Hello"
	str2 := "Hell"
	str3 := "Hello"
	str4 := "hello"

	fmt.Printf("%s == %s : %v\n", str1 ,str2 ,str1==str2) // false
	fmt.Printf("%s == %s : %v\n", str1 ,str3 ,str1==str3) // ture
	fmt.Printf("%s == %s : %v\n", str1 ,str4 ,str1==str4) // false
}

// 대문자 소문자도 서로 다르면 false

```

문자열 대소 비교

연산자 : >,<,>=,<=,
대소 비교 연산자들을 활용해서 문자열 간 대소를 비교한다.
문자열 대소 비교는 첫 글자부터 하나씩 값을 비교해서 그 글자에 해당하는 유니코드 값이 다를 경우 대소를 반환한다.
값이 같을 경우에는 다음 글자를 비교한다.

```go
func main() {

	str1 := "BBB"
	str2 := "aaaaAAA"
	str3 := "BBAB"
	str4 := "ZZZ"

	fmt.Printf("%s > %s : %v\n", str1, str2, str1 > str2)  //false
	fmt.Printf("%s > %s : %v\n", str1, str3, str1 > str3)  //ture
	fmt.Printf("%s > %s : %v\n", str1, str4, str1 >= str4) //false

}

```

1. 문자열 대소 비교는 문자열 앞 글자부터 대소 비교
2. 문자열 대소 비교 시 문자열 길이와 상관없이 앞글자부터 (같은 위치에 끼리) 비교한다.
3. B는 UTF-8값은 66번 , a는 UTF-8값은 97번이다.
4. B보다 a가 큰 값이다. 
5. BBB > aaaaAAA 는 false 


문자열 구조.

string 타입은 Go 언어에서 제공하는 내장 타입으로 그 내부 구현은 감춰져 있다.
하지만 reflect 패키지 안의 StringHeader 구조체를 통해서 내부 구현을 살펴볼 수 있다.

```go
type StringHeader struct {
	Data uintptr
	Len int
}
```

1. string은 필드가 2개인 구조체.
2. 첫번째 필드 Data는 uintptr 타입으로 문자열의 데이터가 있는 메모리 주소를 나타내는 일종의 포인터
3. Len은 int 타입으로 문자열의 길이를 나타낸다.


string끼리 대입

```go
func main() {

	str1 := "안녕하세요. 한글 문자열 입니다."
	str2 := str1

	fmt.Printf(str1)
	fmt.Printf("\n")
	fmt.Printf(str2)

	//안녕하세요. 한글 문자열 입니다.
    //안녕하세요. 한글 문자열 입니다.

}
```
1. str1의 Data와 Len값만 str2에 복사한다.

구조체 변수가 복사될 때 구조체 크기만큼 메모리가 복사된다.
str1, str2는 모두 구조체이므로, 각 필드, 즉 Data 포인터 값과 Len값이 복사된다.
st1,str2모두 같은 메모리를 가리킨다.

문자열 주솟값인 Data까지 복사되므로 당연히 문자열 자체는 복사 X

```go
func main() {

	str1 := "Hello world"
	str2 := str1


	// string 타입 str1 , str2를 reflect.StringHeader 타입으로 변환
	// Go는 string타입에서 reflect.StringHeader타입 변환을 막고 있어서 강제 변환을 위해
	// unsafe.Pointer(&str1)을 사용해서 unsafe.Pointer 타입으로 변환한 다음 다시 
	// reflect.StringHeader 타입으로 변환
	stringHeader1 := (*reflect.StringHeader)(unsafe.Pointer(&str1))
	stringHeader2 := (*reflect.StringHeader)(unsafe.Pointer(&str2))

	fmt.Println(stringHeader1) //&{4826632 11}
	fmt.Println(stringHeader2) //&{4826632 11}

}

```
1. str1 변수값을 str2에 복사.
2. str1의 모든 필드 값이 str2에 복사되어 같은 메모리 데이터를 가리키게 된다.
3. string 변수가 가리키는 문자열이 아무리 길어도 string 변수끼리 대입 연산에서는 16바이트 값만 복사 될 뿐, 문자열 데이터는 복사되지 않는다.

문자열은 불변
문자열은 불변이다(immutable)
불변이라는 말은 string 타입이 가리키는 문자열의 일부만 변경할 수 없나는 말.

var str string ="hello world"
str = "Yes"  // 전체 바꾸기 가능
str[2] = "a" // 일부 변경 불가 , 에러 발생

str값을 다른 문자열로 바꾸는 것은 가능하다.
str은 "Yes" 문자열이 있는 메모리 주소로 Data 포인터 값을 변경하고, Len 값도 문자열 길이에 맞게 변경한다.

하지만 문자열 일부는 바꿀 수 없다.

```go
func main() {

	var str string = "Hello World"
	var slice []byte = []byte(str)

	slice[2] = 'a'

	fmt.Println(str) // Hello World
	fmt.Printf("%s\n", slice) // Healo World

}

```

1. []byte 슬라이스로 타입 변환.
2. 문자열은 결국 byte 배열이므로 , []byte로 타입 변환하면 같은 메모리 공간을 가리킬 것으로 예상할 수 있지만, slice와 str이 가리키는 메모리 공간은 서로 다르다.
3. 그래서 결과값이 서로 다르게 나오는 것을 확인할 수 있다.

Go 언어는 타입변환을 할 때 문자열을 복사해서 새로운 메모리 공간을 만들어 가리키도록 한다.
이렇게 해야 불변 원칙을 지킬 수 있기 때문이다.

문자열 합산
Go 언어에서 string 타입 간 합 연산을 지원한다.
합 연산을 하면 두 문자열이 하나로 합쳐지게 된다.

```go

func main() {

	var str string = "Hello"
	stringheader := (*reflect.StringHeader)(unsafe.Pointer(&str)) // 내부 구조체 변경
	addr1 := stringheader.Data                                    // Data 필드 값을 변수에 담아준다.

	str += " world"            // str 문자열 뒤에 world
	addr2 := stringheader.Data //Data 필드 값을 addr2에 담아준다.
	str += " welcome!"
	addr3 := stringheader.Data

	fmt.Println(str)
	fmt.Printf("addr1:\t%x\n", addr1) // 49a76f
	fmt.Printf("addr2:\t%x\n", addr2) // c0000b4000
	fmt.Printf("addr3:\t%x\n", addr3) // c0000b6000

	
}

```

Go 언어는 기존 문자열 메모리 공간을 건드리지 않고, 새로운 메모리 공간을 만들어서 두 문자열을 합치기 때문에, string 합 연산 이후 주솟값이 변경된다.
따라서 문자열 불변 원칙이 준수된다.

string 합 연산을 빈번하게 하면 메모리 낭비가 된다.
그래서 string 합 연산을 빈번하게 사용하는 경우에는 , string 패키지 Builder을 이용해서 메모리 낭비를 줄일 수 있다.

```go
func ToUpper1(str string) string {
	var rst string
	for _, c := range str {
		if c >= 'a' && c <= 'z' {
			rst += string('A' + (c - 'a'))
			fmt.Println(rst) // 아스키 연산
		} else {
			rst += string(c)
		}
	}
	return rst
}

func ToUpper2(str string) string {
	var builder strings.Builder
	for _, c := range str {
		if c >= 'a' && c <= 'z' {
			builder.WriteRune('A' + (c - 'a'))
		} else {
			builder.WriteRune(c)
		}
	}
	return builder.String()
}

func main() {

	var str string = "Hello World"

	fmt.Println(ToUpper1(str))
	fmt.Println(ToUpper2(str))

}
```
1. 두 함수 모두 소문자를 대문자로 변경한다.
2. ToUpper1() 함수는 합 연산을 사용해서 문자를 더한다.
   Go 언어 내부에서는합 연산을 사용할 때마다 새로운 메모리 공간을 할당해서,
   두 문자열을 더한다.
   즉 합 연산을 할 때마다 메모리 공간이 버려진다. 이에 메모리 낭비 발생...

3. ToUpper2() strings.Builder 객체를 이용해서 문자를 더한다.
   strings,Builder는 내부에 슬라이스를 가지고 있기 때문에, WriteRune() 메소드를 통해서 
   문자를 더할 때 매번 메모리를 새로 생성하지 않고, 기존 메모리에 빈 자리가 있으면 그냥 더한다.


문자열의 불변 원칙을 지키려하는가

가장 큰 이유는 예기치 못한 버그를 방지하기 위해서.
string 타입이 복사 될 때, 문자열 전체가 복사되는 것이 아닌 Data, Len 필드 값만 복사된다.
그래서 모두 str, str2 ,str3 ..모두 같은 문자열을 가리키게 된다.
하지만 불변 원칙이 없고, 어떤 문자열 일부 값을 변경하게 된다면 , 모두 변경된 문자열을 가리키게 된다.

만약 string 변수 값이 코드 전반에 걸쳐 여러 곳에서 복사됐다면 언제 어디에서 문자열이 변경되었는지 알 수 없어서 많은 버그 양산으로 이어질 수 있다.